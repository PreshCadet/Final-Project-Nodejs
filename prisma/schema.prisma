// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  userId  Int             @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  username            String  @unique
  firstName           String
  lastName            String
  password            String
  email               String  @unique
  bio                 String?
  birthday            String
  tweet               Tweet[] @relation("username_Tweet")
  replies             Reply[] @relation("user_reply") 
  favorite            Favorite[] @relation("user_favorites")
  following           Follow[] @relation("user_following")
  followers           Follow[] @relation("user_followers")
}

model Tweet {
  id Int              @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  content             String
  userid              Int
  username            User @relation("username_Tweet", fields: [id], references: [userId], onDelete: Cascade)
  reply               Reply[] @relation("reply_tweet")
  favorite            Favorite[] @relation("favorite_tweet")
}

model Reply {
  id Int              @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tweetId             Int
  tweet               Tweet @relation("reply_tweet", fields: [tweetId], references: [id], onDelete: Cascade)
  userid              Int
  username            User @relation("user_reply", fields: [id], references: [userId], onDelete: Cascade)
  content             String
}

model Favorite {
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tweetId             Int
  tweet               Tweet @relation("favorite_tweet", fields:[tweetId], references:[id],onDelete: Cascade) 
  userid              Int
  username            User @relation("user_favorites", fields: [userid], references: [userId], onDelete: Cascade)
  @@id([userid, tweetId])
}

model Follow {
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  followId            Int
  following           User @relation("user_following", fields: [followId], references: [userId], onDelete: Cascade)
  followerId          Int
  follower            User @relation("user_followers", fields: [followerId], references: [userId], onDelete: Cascade)

  @@id([followId, followerId])
}
